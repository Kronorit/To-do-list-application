{"version":3,"sources":["components/SearchBar.js","components/TaskForm.js","components/Task.js","components/TasksUndone.js","components/TasksDone.js","components/Tasks.js","logic/assignId.js","App.js","index.js"],"names":["SearchBar","className","id","type","placeholder","React","Component","TaskForm","props","state","title","handleChange","bind","e","this","setState","target","value","onSubmit","addTask","preventDefault","required","onChange","Task","isCompleted","completed","toggleCompleted","checked","htmlFor","onClick","deleteTask","TasksUndone","tasksUndone","tasks","filter","task","map","TasksDone","tasksDone","Tasks","assignId","array","j","i","idArray","push","length","parseInt","App","a","fetch","res","json","data","newTasks","undefined","trim","alert","unshift","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d81c4ce7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  render() {\r\n    return(\r\n    <form className=\"search-bar\">\r\n      <input id=\"bar\" type=\"text\" placeholder =\"Search a task\"/>\r\n      <button id=\"button\">Buscar</button>\r\n    </form>\r\n    );\r\n  }    \r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport './TaskForm.css';\r\n\r\nclass TaskForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({title: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form \r\n                className=\"create-task-form\" \r\n                onSubmit={e => {\r\n                    this.props.addTask(this.state.title)\r\n                    e.preventDefault();\r\n                }}\r\n            >\r\n                <input type=\"text\" id=\"create-task-title\" placeholder=\"Create a new task.\" required onChange={this.handleChange}/>\r\n                <input type=\"submit\" id=\"create-task-button\" value=\"+\"/>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;","import React from 'react';\r\nimport './Task.css';\r\n\r\nclass Task extends React.Component{\r\n\r\n    render(){\r\n        const isCompleted = this.props.completed;\r\n        return(\r\n            <div className=\"task\">\r\n                <h2 className={\"task-title \" + (isCompleted  ? \"task-done\" : \"task-undone\")}>{this.props.title}</h2>\r\n                <input \r\n                    type=\"checkbox\" \r\n                    className=\"toggle-completed\" \r\n                    id={\"task\" + this.props.id} \r\n                    onChange={() => {this.props.toggleCompleted(this.props.id);}}\r\n                    checked= {isCompleted}\r\n                />\r\n                <label className=\"input-label\" htmlFor={\"task\" + this.props.id}></label>\r\n                <button \r\n                    className=\"task-delete-button\" \r\n                    onClick={() => {this.props.deleteTask(this.props.id)}}>\r\n                        X\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\n\r\nimport Task from './Task.js'\r\n\r\nclass TasksUndone extends React.Component {\r\n\r\n    render() {  \r\n        const tasksUndone = this.props.tasks.filter(task => task.completed !== true);\r\n        return (\r\n            <div className=\"tasks-undone\">\r\n                {tasksUndone.map(task => {\r\n                    return(\r\n                        <Task \r\n                            title={task.title} \r\n                            completed={task.completed} \r\n                            id={task.id} \r\n                            toggleCompleted={this.props.toggleCompleted} \r\n                            deleteTask={this.props.deleteTask} \r\n                            key={task.id}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>) \r\n    }\r\n}\r\n\r\nexport default TasksUndone;","import React from 'react';\r\n\r\nimport Task from './Task.js'\r\n\r\nclass TasksDone extends React.Component {\r\n\r\n    render() {    \r\n        const tasksDone = this.props.tasks.filter(task => task.completed === true);\r\n        return (\r\n            <div className=\"tasks-done\">\r\n                {tasksDone.map(task => {\r\n                    return(\r\n                        <Task \r\n                            title={task.title} \r\n                            completed={task.completed} \r\n                            id={task.id} \r\n                            toggleCompleted={this.props.toggleCompleted} \r\n                            deleteTask={this.props.deleteTask} \r\n                            key={task.id}\r\n                        />\r\n                    );\r\n                    \r\n                })}\r\n            </div>) \r\n    }\r\n}\r\n\r\nexport default TasksDone;","import React from 'react';\r\n\r\nimport TasksUndone from './TasksUndone.js';\r\nimport TasksDone from './TasksDone.js';\r\n\r\nclass Tasks extends React.Component{\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tasks\">\r\n                <TasksUndone \r\n                    tasks={this.props.tasks}\r\n                    toggleCompleted={this.props.toggleCompleted} \r\n                    deleteTask={this.props.deleteTask}\r\n                />\r\n                <hr/>\r\n                <TasksDone \r\n                    tasks={this.props.tasks}\r\n                    toggleCompleted={this.props.toggleCompleted} \r\n                    deleteTask={this.props.deleteTask}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tasks;","function assignId(array) {\r\n\tlet j = 0;\r\n\tlet i = 0;\r\n\tlet id = 0;\r\n\tlet idArray = [];\r\n\r\n\t// Create array with object's id;\r\n\tfor (j in array) idArray.push(array[j].id);\r\n\r\n\t// Create new id\r\n\tfor (i = 0; i < idArray.length; i++) {\r\n\t\tfor (j in idArray) {\r\n\t\t\tif (parseInt(idArray[j]) === id) {\r\n\t\t\t\tid += 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (parseInt(j) + 1 === parseInt(idArray.length)) {\r\n\t\t\t\treturn id;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// In case that for loop's return id does not work do this\r\n\r\n\treturn id;\r\n}\r\n\r\nexport default assignId;","import React from 'react';\n\nimport './App.css';\n\n\n// Components\n\nimport SearchBar from './components/SearchBar.js';\nimport TaskForm from './components/TaskForm.js';\nimport Tasks from './components/Tasks.js';\nimport assignId from './logic/assignId';\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: []\n    };\n\n    // Binded functions\n\n    this.toggleCompleted = this.toggleCompleted.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n    this.addTask = this.addTask.bind(this);\n  }\n\n  // Fetch data from the server on component mount.\n\n  async componentDidMount(){\n    const res = await fetch('https://jsonplaceholder.typicode.com/todos');\n    const data = await res.json();\n    this.setState({\n      tasks: data,\n    });\n  }\n\n  // Toggle completed property of an object.\n\n  toggleCompleted(id) {\n    const tasks = this.state.tasks;\n    for (let task in tasks) {\n      if(tasks[task].id === id){\n        tasks[task].completed = !tasks[task].completed;\n        break;\n      }\n    }\n    this.setState({tasks: tasks});\n  }\n\n  // Delete a task.\n\n  deleteTask(id) {\n    const newTasks = this.state.tasks.filter(task => task.id !== id);\n\n    this.setState({tasks: newTasks});\n  }\n\n  // Create a new task.\n\n  addTask(title) {\n    const tasks = this.state.tasks;\n    if (title === null || title === undefined || title.trim() === '') alert(\"You have to write a title to create a new task\");\n    else {  \n      tasks.unshift({\n        id: assignId(tasks),\n        title: title,\n        completed: false\n      });\n\n      this.setState({\n        tasks: tasks\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <SearchBar/>\n        <TaskForm addTask={this.addTask}/>\n        <Tasks \n          tasks={this.state.tasks}\n          tasksDone={this.state.tasksDone} \n          tasksUndone={this.state.tasksUndone} \n          toggleCompleted={this.toggleCompleted} \n          deleteTask={this.deleteTask}\n        />\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}